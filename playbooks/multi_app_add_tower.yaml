---
- name: APPEND NEW APPS TO TENANT
  hosts: all     # this means tower is handling the inventory
  gather_facts: false
  connection: local
  

  tasks:

  - name: FORMAT USER INPUT VARIABLES INTO NESTED LIST
    set_fact:
      format_new_app: [{	"app_name": "{{ tower_app_name }}","bigip": "{{ tower_bigip }}","template": "{{ tower_app_template }}","vs_ip": "{{ tower_app_vs_ip }}","members": "{{ tower_app_members }}"}]


  - name: IF NOT EXIST, TOUCH TENANT CONFIG FILE  
    file:
      path: "../tenant-config/{{ tower_bigip }}/{{ tower_tenant }}.yaml"
      state: touch


  - name: GET APPLICATION VARS FROM TENANT CONFIG FILE 
    include_vars:
      file: '../tenant-config/{{ tower_bigip }}/{{ tower_tenant }}.yaml'


  - name: IF APPLICATION VAR EMPTY, ADD NEW APP TO VAR
    set_fact:
      applications: "{{ format_new_app }}"
    when: applications is not defined


  - name: COUNT APPS IN ORIGIN APPLICATION VAR 
    set_fact:
      existing_apps_length: "{{ applications|length }}"


  - name: DEBUG - APPLICATION VAR *** TENANT EXISTING *** 
    debug:
      msg: "{{ existing_apps_length }} existing 'applications' {{ applications }} *** TENANT EXISTING *** "
    when: applications is defined


  - name: ADD (UNION) NEW APP TO APPLICATIONS VAR
    set_fact:
      new_applications: '{{ applications | union(format_new_app) }}'


  - name: COUNT APPS IN UPDATED APPLICATION VAR
    set_fact:
      new_apps_length: "{{ new_applications|length }}"


  - name: DEBUG - APPLICATION VAR *** TENANT NEW *** 
    debug:
      msg: "{{ new_apps_length }} total 'applications' {{ new_applications }} *** TENANT NEW *** "
    when: applications is defined


  - name: RENDER TEMPLATE
    set_fact:
      tenant_body: "{{ lookup('template', '../j2/multi_app_macro.j2', split_lines=False) }}"


  - name: OUTPUT RENDERED AS3
    debug:
      msg: "{{ tenant_body }}"


  - name: URI POST AS3 TO BIG-IP '{{ tower_bigip }}', TENANT '{{ tower_tenant }}'
    uri:
       url: "https://{{ inventory_hostname }}/mgmt/shared/appsvcs/declare"
       method: POST
       user: "{{ lookup('env', 'ANSIBLE_NET_USERNAME') }}"
       password: "{{ lookup('env', 'ANSIBLE_NET_PASSWORD') }}"
       validate_certs: no
       body: "{{ tenant_body }}"
       body_format: json


# After AS3 is successfully deployed, update the source of truth

  - name: WRITE NEW SOURCE OF TRUTH TO LOCAL FILE
    copy:
      content: "{{ { 'applications': new_applications } | to_nice_yaml() }}"
      dest: '../tenant-config/{{ tower_bigip }}/{{ tower_tenant }}.yaml'


  - name: GIT ADD TENANT FILE TO LOCAL REPO
    shell: git add '../tenant-config/{{ tower_bigip }}/{{ tower_tenant }}.yaml'


  - name: SET USERNAME FOR GIT COMMIT 
    shell: git config user.email ansible@tower.com; git config user.name Ansible_Tower
    register: config_command_result
    failed_when: "'fail' in config_command_result.stdout"


  - name: OUTPUT GIT CONFIG COMMAND RESULT
    debug:
      msg: "git returned = {{ config_command_result }}"


  - name: GIT COMMIT  
    shell: git commit -a -m 'update ../tenant-config/{{ tower_bigip }}/{{ tower_tenant }}.yaml'
    register: command_result
    failed_when: "'fail' in command_result.stdout"


  - name: DEBUG GIT COMMIT OUTPUT
    debug:
      msg: "git returned = {{ command_result.stdout }}"
  

# The command below requires you to add 'Source Control' Credentials to Ansible Tower for git authentication
  - name: GIT PUSH
    shell: "git push"
    register: git_push 


# Beware: this will output your Source Control creds as part of the git URL https://user:password@github.com/<repo>
#  - name: OUTPUT GIT PUSH RESULT
#    debug:
#      msg: "git push output = {{ git_push }}"

  

  
